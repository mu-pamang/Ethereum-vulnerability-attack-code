// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;
// SafeMath 라이브러리를 사용하기 위해 import
import 'openzeppelin-contracts-06/math/SafeMath.sol';

// 재진입 공격에 취약한 컨트랙트
contract Reentrance {
  using SafeMath for uint256; // SafeMath 라이브러리 사용 선언
  mapping(address => uint) public balances; // 각 주소의 잔고를 저장하는 매핑

// 기부 함수: 주어진 주소에 이더를 전송하고, 해당 주소의 잔고를 업데이트
function donate(address _to) public payable {
  balances[_to] = balances[_to].add(msg.value);
}

// 잔고 조회 함수: 주어진 주소의 현재 잔고를 반환
function balanceOf(address _who) public view returns (uint balance) {
  return balances[_who];
}

// 출금 함수: 주어진 금액만큼 이더를 출금하고, 잔고를 업데이트
function withdraw(uint _amount) public {
// 출금할 금액이 보유한 잔고보다 작거나 같은 경우 실행
if(balances[msg.sender] >= _amount) {
  // msg.sender.call을 사용하여 외부 호출 (재진입 공격의 위험이 있음)
  (bool result,) = msg.sender.call{value:_amount}("");
  // -> msg.sender에게 _amount만큼 ETH보다.
  // 외부 호출 결과가 성공이면 실행
if(result) {
  _amount; // 미사용 코드 (결과 값을 반환하지 않고 있는데 사용되지 않음)
}
  // 출금한 금액을 잔고에서 차감
  balances[msg.sender] -= _amount;
  }
}

// Fallback 함수: 이더를 받아들이기 위한 함수
receive() external payable {}
}
